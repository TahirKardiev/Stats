# 1) Даны значения величины заработной платы заемщиков банка (zp) и значения их поведенческого кредитного скоринга 
# (ks): zp = [35, 45, 190, 200, 40, 70, 54, 150, 120, 110], ks = [401, 574, 874, 919, 459, 739, 653, 902, 746, 832].
#  Используя математические операции, посчитать коэффициенты линейной регрессии, приняв за X заработную плату 
# (то есть, zp - признак), а за y - значения скорингового балла (то есть, ks - целевая переменная). Произвести расчет
#  как с использованием intercept, так и без.
import numpy as np
from sklearn.linear_model import LinearRegression

zp = np.array([35, 45, 190, 200, 40, 70, 54, 150, 120, 110]).reshape((-1, 1))
ks = np.array([401, 574, 874, 919, 459, 739, 653, 902, 746, 832])
n=len(zp)
b1= (np.mean(zp*ks)-np.mean(zp)*np.mean(ks))/(np.mean(zp**2)-np.mean(zp)**2)
b1 = 2.620538882402765
b0= np.mean(ks)- b1*np.mean(zp)
b0 = 444.1773573243596
y_pred=b0+b1*zp
# y_pred= np.array([ 535.89621821 562.10160703 942.07974498 968.2851338  548.99891262
#  627.61507909 585.68645697 837.25818968 758.64202321 732.43663439])
mse = ((ks-y_pred)**2).sum()/n
#6470.414201176658 мера измерения ошибок, которые функция делает на нашем наборе данных
model = LinearRegression()
regres = model.fit(zp, ks)
print (regres.intercept_) #444.17735732435943
print (regres.coef_) #2.62053888
y_pred = model.predict(zp)
# print(y_pred) [535.89621821 562.10160703 942.07974498 968.2851338  548.99891262
#  627.61507909 585.68645697 837.25818968 758.64202321 732.43663439]